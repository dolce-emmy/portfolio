"use client";
import React, { useEffect } from "react";
import { useState } from "react";
import { Montserrat } from "next/font/google";
import "./globals.css";
import useThemeSwitcher from "./components/hooks/useThemeSwitcher";
import NavBar from "./components/NavBar";
import Script from "next/script";
import LoadingIcons from "react-loading-icons";
import { motion,AnimatePresence} from "framer-motion";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import TransitionEffect from "./components/TransitionEffect";
const montserrat = Montserrat({
  subsets: ["latin"],
  variable: "--font-mont",
});

const metadata = {
  title: "Portfolio",
  description: "Generated by create next app",
};

export default function RootLayout({ children, className = "" }) {

  const [loading, setLoading] = useState(true);
    const path = usePathname();
    const router = useRouter();
    const searchParams = useSearchParams();
      useEffect(() => {

    const handleLoad = () => {
      setLoading(false);
      console.log("Page loaded, loading state set to false");
    };

    window.addEventListener("load", handleLoad);

    // Fallback in case load event doesn't fire in reasonable time
    const timer = setTimeout(() => {
      setLoading(false);
      console.log("Fallback timer triggered, loading state set to false");
    }, 4000); // Adjust the fallback time as needed

    return () => {
      window.removeEventListener("load", handleLoad);
      clearTimeout(timer); // Cleanup timer on component unmount
    };
  }, []);

// here we are useEffect to check if the children are received or not
  useEffect(() => {
    console.log("Children received:", children);
  }, [children]);

  console.log(path);
  console.log(searchParams);

  return (
    <html lang="en">
      <body
        className={`${montserrat.variable} bg-desert  text-darkPurple w-full min-h-screen dark:bg-dark ${className}`}
      >
        <NavBar />
        {loading && (
          // <div className="flex justify-center items-center h-screen ">
          //   {/* <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-snow"></div> */}
          // </div>
          <div className="flex justify-center items-center h-screen">
            <LoadingIcons.Bars speed={0.75} />
          </div>
        )}

        {!loading && children}

        {/* {!loading && (
          <AnimatePresence mode="wait">
            <motion.span key={path}>
              <TransitionEffect />
              {children}
            </motion.span>
          </AnimatePresence>
        )} */}

        <Script id="theme-switcher" strategy="beforeInteractive">
          if (localStorage.theme === 'dark' || (!('theme' in localStorage) &&
          window.matchMedia('(prefers-color-scheme: dark)').matches)){" "}
          {`document.documentElement.classList.add("dark")`} else{" "}
          {`document.documentElement.classList.remove("dark")`}
        </Script>
      </body>
    </html>
  );
}
